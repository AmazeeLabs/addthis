<?php

/**
 * @file
 * Defines simple addthis field types.
 */

/**
 * Implements hook_help().
 */
function addthis_help($path, $arg) {
  switch ($path) {
    case 'admin/help#addthis':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The addthis module defines addthis field type for the Field module. A addthis field may contain a button, toolbox, sharecount or customized sharing tool using <a href=\"http://addthis.com/\">AddThis.com</a>.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_info().
 *
 * Field settings:
 *   - max_length: the maximum length for a varchar field.
 * Instance settings:
 *   - addthis_processing: whether addthis input filters should be used.
 */
function addthis_field_info() {
  return array(
    'addthis' => array(
      'label' => t('Addthis'),
      'description' => t('This field stores addthis settings in the database.'),
      'settings' => array('max_length' => 255),
      'instance_settings' => array('addthis_processing' => 0),
      'default_widget' => 'addthis_addthisfield',
      'default_formatter' => 'addthis_default',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function addthis_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form['addthis_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Addthis username'),
    '#default_value' => isset($settings['addthis_user']) ? $settings['addthis_user'] : '',
    '#required' => FALSE,
    '#description' => t('Username at <a href="http://addthis.com/" target="_blank">AddThis.com</a>. Required for statistics.'),
  );
  $form['addthis_style'] = array(
    '#type' => 'radios',
    '#title' => t('Select default style'),
    '#default_value' => isset($settings['addthis_style']) ? $settings['addthis_style'] : '',
    '#options' => array(
      'disabled' => t('Disabled'),
      'large_button' => t('Large button'),
      'compact_button' => t('Compact button'),
      'toolbox' => t('Toolbox'),
      'sharecount' => t('Sharecount'),
    ),
  );

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function addthis_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $form = array();
  return $form;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'addthis_value_max_length': The value exceeds the maximum length.
 */
function addthis_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
//    if (!empty($item['value'])) {
//      if (!empty($field['settings']['max_length']) && drupal_strlen($item['value']) > $field['settings']['max_length']) {
//        $message = t('%name: the addthis may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length']));
//        $errors[$field['field_name']][$langcode][$delta][] = array(
//          'error' => "addthis_value_length",
//          'message' => $message,
//        );
//      }
//    }
  }
}

/**
 * Implements hook_field_load().
 *
 * Where possible, generate the sanitized version of each field early so that
 * it is cached in the field cache. This avoids looking up from the filter cache
 * separately.
 *
 * @see addthis_field_formatter_view()
 */
function addthis_field_load($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Only process items with a cacheable format, the rest will be handled
      // by formatters if needed.
      if (empty($instances[$id]['settings']['addthis_processing']) || filter_format_allowcache($item['format'])) {
//        $items[$id][$delta]['safe_value'] = isset($item['value']) ? $item['value'] : '';
        $items[$id][$delta]['safe_value'] = $item['value'];
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function addthis_field_is_empty($item, $field) {
  return empty($item['value']) && (string) $item['value'] !== '0';
}

/**
 * Implements hook_field_formatter_info().
 */
function addthis_field_formatter_info() {
  return array(
    'addthis_default' => array(
      'label' => t('Default'),
      'field types' => array('addthis', 'addthis_long', 'addthis_with_summary'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function addthis_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Placeholder
  $element = array();

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function addthis_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Placeholder
  $summary = '';

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function addthis_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
      switch ($item['value']) {
        case 'large_button':
          $output = '<a class="addthis_button" href="http://www.addthis.com/bookmark.php?v=250&amp;username=xa-4ccd432f7eced6a5"><img src="http://s7.addthis.com/static/btn/v2/lg-share-en.gif" width="125" height="16" alt="Bookmark and Share" style="border:0"/></a><script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#username=xa-4ccd432f7eced6a5"></script>';
          break;
        case 'compact_button':
          $output = '<a class="addthis_button" href="http://www.addthis.com/bookmark.php?v=250&amp;username=xa-4ccd257613693d61"><img src="http://s7.addthis.com/static/btn/sm-share-en.gif" width="83" height="16" alt="Bookmark and Share" style="border:0"/></a><script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#username=xa-4ccd257613693d61"></script>';
          break;
        case 'toolbox':
          $output = '<div class="addthis_toolbox addthis_default_style"><a href="http://www.addthis.com/bookmark.php?v=250&amp;username=xa-4ccd43543c7446e9" class="addthis_button_compact">Share</a><span class="addthis_separator">|</span><a class="addthis_button_preferred_1"></a><a class="addthis_button_preferred_2"></a><a class="addthis_button_preferred_3"></a><a class="addthis_button_preferred_4"></a></div><script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#username=xa-4ccd43543c7446e9"></script>';
          break;
        case 'sharecount':
          $output = '<div class="addthis_toolbox addthis_default_style"><a class="addthis_counter"></a></div><script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#username=xa-4ccd4383793d0ab4"></script>';
          break;
        default:
          $output = '';
          break;
      }
      $element[$delta] = array('#markup' => $output);
  }

  return $element;
}


/**
 * Implements hook_field_widget_info().
 */
function addthis_field_widget_info() {
  return array(
    'addthis_button' => array(
      'label' => t('AddThis button'),
      'field types' => array('addthis'),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function addthis_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  
  // Placeholder

  $form = array();
  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function addthis_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $main_widget = array();

  switch ($instance['widget']['type']) {
    case 'addthis_button':
      $main_widget = $element + array(
        '#type' => 'select',
        '#default_value' => isset($items[$delta]) ? $items[$delta] : $field['settings']['addthis_style'],
        '#multiple' => 0,
        '#options' => array(
          'disabled' => t('Disabled'),
          'large_button' => t('Large button'),
          'compact_button' => t('Compact button'),
          'toolbox' => t('Toolbox'),
          'sharecount' => t('Sharecount'),
        ),
      );
      break;
  }

  if ($main_widget) {
    $element['value'] = $main_widget;
  }

  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function addthis_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    default:
      $error_element = $element[$element['#columns'][0]];
      break;
  }

  form_error($error_element, $error['message']);
}


/**
 * Implements hook_filter_format_update().
 */
function addthis_filter_format_update($format) {
  field_cache_clear();
}

/**
 * Implements hook_filter_format_disable().
 */
function addthis_filter_format_disable($format) {
  field_cache_clear();
}

/**
 * Implements hook_block_info().
 */
function addthis_block_info() {
  $blockInfo = array();
  $blockInfo['addthis_block'] = array(
    'info' => t('An AddThis-block.'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blockInfo;
}
