<?php

/**
 * @file
 * Defines simple AddThis field types.
 */

module_load_include('php', 'addthis', 'classes/AddThis');

/**
 * Implements hook_help().
 */
function addthis_help($path, $arg) {
  switch ($path) {
    case 'admin/help#addthis':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The AddThis module defines AddThis field type for the Field module. A AddThis field may contain a button, toolbox, sharecount or customized sharing tool using <a href=\"http://addthis.com/\">AddThis.com</a>.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_info().
 *
 * Field settings:
 *   - max_length: the maximum length for a varchar field.
 * Instance settings:
 *   - addthis_processing: whether addthis input filters should be used.
 */
function addthis_field_info() {
  return array(
    'addthis' => array(
      'label' => t('Addthis'),
      'description' => t('This field stores addthis settings in the database.'),
      'settings' => array('max_length' => 255),
      'instance_settings' => array('addthis_processing' => 0),
      'default_widget' => 'addthis_addthisfield',
      'default_formatter' => 'addthis_default',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function addthis_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form['addthis_style'] = array(
    '#type' => 'select',
    '#title' => t('Select default style'),
    '#default_value' => isset($settings['addthis_style']) ? $settings['addthis_style'] : '',
    '#options' => Addthis::getWidgetTypes(),
  );

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function addthis_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $form = array();
  return $form;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'addthis_value_max_length': The value exceeds the maximum length.
 */
function addthis_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
//    if (!empty($item['value'])) {
//      if (!empty($field['settings']['max_length']) && drupal_strlen($item['value']) > $field['settings']['max_length']) {
//        $message = t('%name: the addthis may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length']));
//        $errors[$field['field_name']][$langcode][$delta][] = array(
//          'error' => "addthis_value_length",
//          'message' => $message,
//        );
//      }
//    }
  }
}

/**
 * Implements hook_field_load().
 *
 * Where possible, generate the sanitized version of each field early so that
 * it is cached in the field cache. This avoids looking up from the filter cache
 * separately.
 *
 * @see addthis_field_formatter_view()
 */
function addthis_field_load($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Only process items with a cacheable format, the rest will be handled
      // by formatters if needed.
      if (empty($instances[$id]['settings']['addthis_processing']) || filter_format_allowcache($item['format'])) {
//        $items[$id][$delta]['safe_value'] = isset($item['value']) ? $item['value'] : '';
        $items[$id][$delta]['safe_value'] = $item['value'];
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function addthis_field_is_empty($item, $field) {
  return empty($item['value']) && (string) $item['value'] !== '0';
}

/**
 * Implements hook_field_formatter_info().
 */
function addthis_field_formatter_info() {
  return array(
    'addthis_default' => array(
      'label' => t('Default'),
      'field types' => array('addthis', 'addthis_long', 'addthis_with_summary'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function addthis_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Placeholder
  $element = array();

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function addthis_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Placeholder
  $summary = '';

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function addthis_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    $widgetType = $item['value'];
    $markup = AddThis::getWidgetMarkup($widgetType, $entity);
    $element[$delta] = array('#markup' => $markup);
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function addthis_field_widget_info() {
  return array(
    'addthis_button' => array(
      'label' => t('AddThis button'),
      'field types' => array('addthis'),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function addthis_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  
  // Placeholder

  $form = array();
  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function addthis_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $main_widget = array();

  switch ($instance['widget']['type']) {
    case 'addthis_button':
      $main_widget = $element + array(
        '#type' => 'select',
        '#options' => AddThis::getWidgetTypes(),
        '#default_value' => isset($items[$delta]) ? $items[$delta] : $field['settings']['addthis_style'],
      );
      break;
  }

  if ($main_widget) {
    $element['value'] = $main_widget;
  }

  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function addthis_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    default:
      $error_element = $element[$element['#columns'][0]];
      break;
  }

  form_error($error_element, $error['message']);
}


/**
 * Implements hook_filter_format_update().
 */
function addthis_filter_format_update($format) {
  field_cache_clear();
}

/**
 * Implements hook_filter_format_disable().
 */
function addthis_filter_format_disable($format) {
  field_cache_clear();
}

/**
 * Implements hook_block_info().
 */
function addthis_block_info() {
  $blockInfo = array();
  $blockInfo[AddThis::BLOCK_NAME] = array(
    'info' => t('An AddThis-block.'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blockInfo;
}

/**
 * Implements hook_block_view().
 */
function addthis_block_view($blockName = '') {
  if ($blockName == AddThis::BLOCK_NAME) {
    $widgetType = AddThis::getBlockWidgetType();
    $markup = AddThis::getWidgetMarkup($widgetType);
    return array(
      'subject' => '',
      'content' => $markup,
    );
  }
}

/**
 * Implements hook_block_configure().
 */
function addthis_block_configure($delta = '') {
  $form[AddThis::BLOCK_WIDGET_TYPE_KEY] = array(
    '#type' => 'select',
    '#title' => t('AddThis widget type'),
    '#options' => AddThis::getWidgetTypes(),
    '#default_value' => AddThis::getBlockWidgetType(),
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function addthis_block_save($delta = '', $edit = array()) {
  variable_set(AddThis::BLOCK_WIDGET_TYPE_KEY, $edit[AddThis::BLOCK_WIDGET_TYPE_KEY]);
}

/**
 * Implements hook_menu().
 */
function addthis_menu() {
  $menuItems['admin/config/system/addthis'] = array(
    'title' => 'AddThis',
    'description' => 'Configure AddThis settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('addthis_admin_settings_form'),
    'access arguments' => array('administer addthis'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'addthis.admin.inc',
  );
  return $menuItems;
}

/**
 * Implements hook_permission().
 */
function addthis_permission() {
  return array(
    'administer addthis' => array(
      'title' => t('Administer AddThis'),
      'description' => t('Perform maintenance tasks for AddThis.'),
    ),
  );
}
