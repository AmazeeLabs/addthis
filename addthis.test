<?php

/**
 * @file
 * Tests for the AddThis-module.
 */

class AddThisTestCase extends DrupalWebTestCase {

  private $user;

  public function setUp() {
    parent::setUp(AddThis::MODULE_NAME);
  }

  public function getInfo() {
    return array(
      'name' => 'Tests for the AddThis-module.',
      'description' => 'Tests for the AddThis-module.',
      'group' => 'AddThis',
    );
  }

  public function testFunctionality() {
    $this->addThisShouldProvideHelp();

    $this->addThisShouldDefineField();

    $this->addThisShouldDefineBlock();

    $this->addThisShouldBeAbleToBeUsedAsField();

    $this->addThisShouldBeAbleToBeUsedAsBlock();

    $this->addThisSystemSettingsShouldBeAbleToBeSaved();
  }

  private function addThisShouldProvideHelp() {
    $this->assertTrue($this->stringContains(module_invoke(AddThis::MODULE_NAME, 'help', 'admin/help#addthis', NULL), 'About'),
                      'AddThis-module should provide help.');
  }

  private function addThisShouldDefineField() {
    $this->assertEqual(1, count(module_invoke(AddThis::MODULE_NAME, 'field_info')), t('AddThis-module should define a field.'));
  }

  private function addThisShouldDefineBlock() {
    $this->assertEqual(1, count(module_invoke(AddThis::MODULE_NAME, 'block_info')), t('AddThis-module should define a block.'));
  }

  private function addThisShouldBeAbleToBeUsedAsField() {
    $this->createAndLoginUser();

    $edit = array();
    $label = $this->generateRandomLowercaseString();
    $edit["fields[_add_new_field][label]"] = $label;
    $edit["fields[_add_new_field][field_name]"] = $label;
    $edit["fields[_add_new_field][type]"] = 'addthis';
    $edit["fields[_add_new_field][widget_type]"] = 'addthis_button';

    $this->drupalPost('admin/structure/types/manage/article/fields', $edit, t('Save'));

    $this->assertText($label, 'AddThis-module should be able to be added as a field.');

    $this->addThisShouldProvideWidgetTypeCompactButton();

    $this->addThisShouldProvideWidgetTypeDisabled();

    $this->addThisShouldProvideWidgetTypeLargeButton();

    $this->addThisShouldProvideWidgetTypeSharecount();

    $this->addThisShouldProvideWidgetTypeToolbox();

    $this->addThisFieldSettingsShouldBeAbleToBeSaved($label);
  }

  private function addThisShouldProvideWidgetTypeCompactButton() {
    $this->assertText('Compact button', 'AddThis-module should provide widget type "Compact button"');
  }

  private function addThisShouldProvideWidgetTypeDisabled() {
    $this->assertText('Disabled', 'AddThis-module should provide widget type "Disabled"');
  }

  private function addThisShouldProvideWidgetTypeLargeButton() {
    $this->assertText('Large button', 'AddThis-module should provide widget type "Large button"');
  } 

  private function addThisShouldProvideWidgetTypeSharecount() {
    $this->assertText('Sharecount', 'AddThis-module should provide widget type "Sharecount"');
  }

  private function addThisShouldProvideWidgetTypeToolbox() {
    $this->assertText('Toolbox', 'AddThis-module should provide widget type "Toolbox"');
  }

  private function addThisFieldSettingsShouldBeAbleToBeSaved($label) {
    $edit = array();
    $edit["field[settings][addthis_style]"] = AddThis::WIDGET_TYPE_LARGE_BUTTON;

    $this->drupalPost(NULL, $edit, t('Save field settings'));

    $this->assertText(t("Updated field @name field settings.", array('@name' => $label)),
                      'AddThis-module field settings should be able to be saved.');
  }

  private function addThisShouldBeAbleToBeUsedAsBlock() {
    $this->assertTrue($this->stringContains($this->drupalGet('admin/structure/block'), 'An AddThis-block.'));

    $this->addThisBlockSettingsShouldBeAbleToBeSaved();
  }

  private function addThisBlockSettingsShouldBeAbleToBeSaved() {
    $edit = array();
    $edit[AddThis::WIDGET_TYPE_KEY] = AddThis::WIDGET_TYPE_COMPACT_BUTTON;

    $this->drupalPost('admin/structure/block/manage/addthis/addthis_block/configure', $edit, t('Save block'));

    $this->assertText(t('The block configuration has been saved.'));
  }

  private function addThisSystemSettingsShouldBeAbleToBeSaved() {
    $edit = array();
    $profileId = $this->generateRandomLowercaseString();
    $edit[AddThis::PROFILE_ID_KEY] = $profileId;

    $this->drupalPost('admin/config/system/addthis', $edit, t('Save configuration'));

    $this->assertText(t('The configuration options have been saved.'));
  }

  private function createAndLoginUser() {
    $this->user = $this->createAdminUser();
    $this->drupalLogin($this->user);
  }

  private function createAdminUser() {
    return $this->drupalCreateUser(
      array(
        'access content',
        'administer addthis',
        'administer blocks',
        'administer content types',
        'administer nodes'
      )
    );
  }

  private function stringContains($string, $contains) {
    return strpos($string, $contains) !== FALSE;
  }

  private function generateRandomLowercaseString() {
    return drupal_strtolower($this->randomName());
  }
}