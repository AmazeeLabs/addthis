<?php

/**
 * @file
 * Tests for the AddThis-module.
 */

class AddThisTestCase extends DrupalWebTestCase {

  private $user;

  public function setUp() {
    parent::setUp('addthis');
  }

  public function getInfo() {
    return array(
      'name' => 'Tests for the AddThis-module.',
      'description' => 'Tests for the AddThis-module.',
      'group' => 'AddThis',
    );
  }

  public function testFunctionality() {
    $this->addThisModuleShouldProvideHelp();

    $this->addThisModuleShouldDefineField();

    $this->addThisModuleShouldDefineBlock();

    $this->addThisShouldBeAbleToBeUsedAsField();

    $this->addThisShouldBeAbleToBeUsedAsBlock();
  }

  private function addThisModuleShouldProvideHelp() {
    $this->assertTrue($this->stringContains(module_invoke('addthis', 'help', 'admin/help#addthis', NULL), 'About'),
                      'AddThis-module should provide help.');
  }

  private function addThisModuleShouldDefineField() {
    $this->assertEqual(1, count(module_invoke('addthis', 'field_info')), t('AddThis-module should define a field.'));
  }

  private function addThisModuleShouldDefineBlock() {
    $this->assertEqual(1, count(module_invoke('addthis', 'block_info')), t('AddThis-module should define a block.'));
  }

  private function addThisShouldBeAbleToBeUsedAsField() {
    $this->createAndLoginUser();

    $edit = array();
    $label = $this->generateRandomLowercaseString();
    $edit["fields[_add_new_field][label]"] = $label;
    $edit["fields[_add_new_field][field_name]"] = $label;
    $edit["fields[_add_new_field][type]"] = 'addthis';
    $edit["fields[_add_new_field][widget_type]"] = 'addthis_button';

    $this->drupalPost('admin/structure/types/manage/article/fields', $edit, t('Save'));

    $this->assertText($label, 'AddThis-module should be able to be added as a field.');

    $this->addThisShouldProvideDefaultTypeCompactButton();

    $this->addThisShouldProvideDefaultTypeDisabled();

    $this->addThisShouldProvideDefaultTypeLargeButton();

    $this->addThisShouldProvideDefaultTypeSharecount();

    $this->addThisShouldProvideDefaultTypeToolbox();

    $this->addThisFieldSettingsShouldBeAbleToBeSaved($label);
  }

  private function addThisShouldProvideDefaultTypeCompactButton() {
    $this->assertText('Compact button', 'AddThis-module should provide default type "Compact button"');
  }

  private function addThisShouldProvideDefaultTypeDisabled() {
    $this->assertText('Disabled', 'AddThis-module should provide default type "Disabled"');
  }

  private function addThisShouldProvideDefaultTypeLargeButton() {
    $this->assertText('Large button', 'AddThis-module should provide default type "Large button"');
  } 

  private function addThisShouldProvideDefaultTypeSharecount() {
    $this->assertText('Sharecount', 'AddThis-module should provide default type "Sharecount"');
  }

  private function addThisShouldProvideDefaultTypeToolbox() {
    $this->assertText('Toolbox', 'AddThis-module should provide default type "Toolbox"');
  }

  private function addThisFieldSettingsShouldBeAbleToBeSaved($label) {
    $edit = array();
    $username = $this->generateRandomLowercaseString();
    $edit["field[settings][addthis_user]"] = $username;
    $edit["field[settings][addthis_style]"] = 'large_button';

    $this->drupalPost(NULL, $edit, t('Save field settings'));

    $this->assertText(t("Updated field @name field settings.", array('@name' => $label)),
                      'AddThis-module field settings should be able to be saved.');
  }

  private function addThisShouldBeAbleToBeUsedAsBlock() {

  }

  private function createAndLoginUser() {
    $this->user = $this->createAdminUser();
    $this->drupalLogin($this->user);
  }

  private function createAdminUser() {
    return $this->drupalCreateUser(array('access content', 'administer content types', 'administer nodes'));
  }

  private function stringContains($string, $contains) {
    return strpos($string, $contains) !== FALSE;
  }

  private function generateRandomLowercaseString() {
    return strtolower($this->randomName());
  }
}